import logging
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import MediaGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from categoryHandler import *
from smileHandler import *

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)


API_TOKEN = ''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

with open('categories.json', 'r', encoding='utf-8') as f:
    categories = json.load(f)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    location = State() # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    category = State() # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    comment = State() # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    media = State() # –§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    ratingSmile = State() # –û—Ü–µ–Ω–∫–∞ —Å–º–∞–π–ª–∏–∫–æ–º
    hashtag = State() # –•–µ—à–¢–µ–≥

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å')).add(KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    await bot.send_message(chat_id= message.from_user.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π .üëã \n...', reply_markup=keyboard)

#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state="*", commands='üîô–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='üîô–û—Ç–º–µ–Ω–∞', ignore_case = True), state="*")
async def cancel_handler(message: types.Message, state):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer('–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É.')
        return
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å')).add(KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    await bot.send_message(message.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)
    await state.finish()

@dp.message_handler(commands='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def cmd_start(message: types.Message):
    await message.answer('–ú–± –≤–ø–∏—Ö–Ω—É—Ç—å –∏–Ω—Ñ—É –ø–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞–Ω–∏—é –±–æ—Ç–∞ –∏ —Å–∞–π—Ç')

#–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å')
async def cancel_handler(message: types.Message, state):
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('üîô–û—Ç–º–µ–Ω–∞'))
    # –ó–∞–ø—É—Å–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    await Form.location.set()
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è? (–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é)', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(content_types=['any'], state=Form.location)
async def process_wrong_location(message: types.Message, state: FSMContext):
    if message.content_type != 'location':
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        return
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['location'] = message.location
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
    if categories:
        number = 0
        for category, subcategories  in categories.items():
                ansMsg += str(number + 1) + '. ' + category + '\n'
                number += 1
        ansMsg += '\n'
        ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
        form = inline_keyboard_category('start', ' ', categories)
        await bot.send_message(message.from_user.id, ansMsg, reply_markup=form)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await Form.next()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(state=Form.category)
async def process_category(call: types.CallbackQuery, state: FSMContext):
    if call.data.split('_')[1] == 'category':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['category'] = call.data.split('_')[0]
            number = 0
            ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
            for category, subcategories in categories.items():
                if call.data.split('_')[0] in category:
                    if subcategories is not None:
                        for subcategory, features in subcategories.items():
                            ansMsg += str(number + 1) + '. ' + subcategory + '\n'
                            number += 1
                        ansMsg += '\n'
                        ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
                    else:
                        ansMsg = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.\n–ù–∞–∂–º–∏—Ç–µ "–û–∫" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
            await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
            inlkb = inline_keyboard_category('category', call.data.split('_')[0], categories)
            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
            await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
    elif call.data.split('_')[1] == 'subcategory':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['subcategory'] = call.data.split('_')[0]
            number = 0
            ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
            for category, subcategories in categories.items():
                if data['category'] in category:
                    for subcategory, features in subcategories.items():
                        if call.data.split('_')[0] in subcategory:
                            if features is not None:
                                for item in features:
                                    ansMsg += str(number + 1) + '. ' + item + '\n'
                                    number += 1
                                ansMsg += '\n'
                                ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
                            else:
                                ansMsg = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategory}.\n–ù–∞–∂–º–∏—Ç–µ "–û–∫" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
            await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
            inlkb = inline_keyboard_category('subcategory', call.data.split('_')[0], categories)
            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
            await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
    elif call.data.split('_')[1] == 'subsubcategory':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['subsubcategory'] = call.data.split('_')[0]
            for category, subcategories in categories.items():
                if data['category'] in category:
                    for subcategory, features in subcategories.items():
                        if data['subcategory'] in subcategory:
                                for item in features:
                                    if call.data.split('_')[0] in item:
                                        ansMsg = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {item}.\n–ù–∞–∂–º–∏—Ç–µ "–û–∫" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
            await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
            inlkb = inline_keyboard_category('subsubcategory', call.data.split('_')[0], categories)
            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
            await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
    elif call.data.split('_')[1] == 'back':
        if call.data.split('_')[0] == 'subcategory':
            async with state.proxy() as data:
                number = 0
                ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
                for category, subcategories in categories.items():
                    ansMsg += str(number + 1) + '. ' + category + '\n'
                    number += 1
                ansMsg += '\n'
                ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
                await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
                inlkb = inline_keyboard_category('start', ' ', categories)
                await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
        elif call.data.split('_')[0] == 'subsubcategory':
            async with state.proxy() as data:
                number = 0
                ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
                for category, subcategories in categories.items():
                    if data['category'] in category:
                        for subcategory, features in subcategories.items():
                            ansMsg += str(number + 1) + '. ' + subcategory + '\n'
                            number += 1
                ansMsg += '\n'
                ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
                await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
                inlkb = inline_keyboard_category('category', data['category'], categories)
                await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
    elif call.data.split('_')[1] == 'OkBack':
        if call.data.split('_')[0] == 'category':
            async with state.proxy() as data:
                number = 0
                ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
                for category, subcategories in categories.items():
                    ansMsg += str(number + 1) + '. ' + category + '\n'
                    number += 1
                ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
                await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
                inlkb = inline_keyboard_category('start', ' ', categories)
                #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
        elif call.data.split('_')[0] == 'subcategory':
            async with state.proxy() as data:
                number = 0
                ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
                for category, subcategories in categories.items():
                    if data['category'] in category:
                        for subcategory, features in subcategories.items():
                            ansMsg += str(number + 1) + '. ' + subcategory + '\n'
                            number += 1
                        ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
                await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
                inlkb = inline_keyboard_category('category', data['category'], categories)
                #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb) 
        elif call.data.split('_')[0] == 'subsubcategory':
            async with state.proxy() as data:
                number = 0
                ansMsg = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n'
                for category, subcategories in categories.items():
                    if data['category'] in category:
                        for subcategory, features in subcategories.items():
                            if data['subcategory'] in subcategory:
                                if features is not None:
                                    for item in features:
                                        ansMsg += str(number + 1) + '. ' + item + '\n'
                                        number += 1
                                    ansMsg += '\n'
                                    ansMsg += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:üëá'
                await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
                inlkb = inline_keyboard_category('subcategory', data['subcategory'], categories)
                #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
    elif call.data.split('_')[1] == 'ok':
        async with state.proxy() as data:
            if call.data.split('_')[0] == 'category':
                for category, subcategories in categories.items():
                    if data['category'] in category:
                        data['category_output'] = category
            elif call.data.split('_')[0] == 'subcategory':
                for category, subcategories in categories.items():
                    if data['category'] in category:
                        for subcategory, features in subcategories.items():
                            if data['subcategory'] in subcategory:
                                data['category_output'] = subcategory
            else:
                for category, subcategories in categories.items():
                    if data['category'] in category:
                        for subcategory, features in subcategories.items():
                            if data['subcategory'] in subcategory:
                                for item in features:
                                    if data['subsubcategory'] in item:
                                        data['category_output'] = item
            # data['media'] = list() 
            # data['media_group'] = None
            # data['state'] = False
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            ansMsg = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
            await Form.next()       

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message_handler(state=Form.comment)
async def process_comment(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['comment'] = message.text
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        # location = data['location']
        # category = data['category_output']
        # media = data['media']
        # comment = data['comment']
        data['media'] = list() 
        data['media_group'] = None
        data['state'] = False
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        ansMsg = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–æ—Ç 1 –¥–æ 10 —à—Ç—É–∫) –ª–∏–±–æ –≤–∏–¥–µ–æ (–¥–æ 10 —Å–µ–∫—É–Ω–¥) –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ"
        keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–ì–æ—Ç–æ–≤–æ')).add(KeyboardButton('üîô–û—Ç–º–µ–Ω–∞'))
        await bot.send_message(chat_id= message.from_user.id, text=ansMsg, reply_markup=keyboard)
        await Form.next()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    # await bot.send_message(chat_id=message.chat.id, text=f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    # for file in media:
    #     await bot.send_media_group(chat_id=message.chat.id, media=[file])
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    # await state.finish()
    # keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å')).add(KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    # await bot.send_message(chat_id= message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
@dp.message_handler(content_types=['photo', 'video', 'text'], state=Form.media)
async def process_media(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
        if data['state']:
            data['media'] = list()
        if message.media_group_id:  
            if message.photo:
                if data['media'] == []:
                    if data['media_group'] != message.media_group_id:
                        data['state'] = False
                    file_info = message.photo.pop()   
                    data['media'].append(file_info['file_id'])
                    data['media_group'] = message.media_group_id          
                elif data['media_group'] != message.media_group_id:
                    data['media'] = list()
                    data['media_group'] = None
                    await message.reply("–û—à–∏–±–∫–∞: –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç 1 –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∏–±–æ 1 –≤–∏–¥–µ–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
                    return
                else:
                    file_info = message.photo.pop() 
                    data['media'].append(file_info['file_id']) 
            else:
                data['state'] = True
                await message.reply("‚ö†Ô∏è–í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç 1 –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∏–±–æ 1 –≤–∏–¥–µ–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
                return 
        elif message.text == '–ì–æ—Ç–æ–≤–æ':
            if data['media'] != list(): 
                data['media_type'] = 'photo'
                form = inline_keyboard_smile()
                await bot.send_message(message.from_user.id, "–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5", reply_markup=form)
                await Form.next()
            else:
                await message.reply("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—Ç–µ –æ—Ç 1 –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∏–±–æ 1 –≤–∏–¥–µ–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")        
        elif message.photo:
            if type(message.photo) != types.PhotoSize:
                await message.reply("–û—à–∏–±–∫–∞: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ")
                return
            data['media_type'] = 'photo'
            data['media'] = message.photo.pop()['file_id'] 
            form = inline_keyboard_smile()
            await bot.send_message(message.from_user.id, "–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5", reply_markup=form)
            await Form.next()
        elif message.video:
            if message.video.duration > 10:
                await message.reply("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥")
                return
            data['media_type'] = 'video'
            data['media'] = message.video['file_id']
            form = inline_keyboard_smile()
            await bot.send_message(message.from_user.id, "–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5", reply_markup=form)
            await Form.next()
        else:
            await message.reply("–û—à–∏–±–∫–∞: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
            return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–∞–π–ª —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(state=Form.ratingSmile)
async def process_category(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data.split('_')[0] == 1:
            data['ratingSmile'] = 'üò°'
        elif call.data.split('_')[0] == 2:
            data['ratingSmile'] = 'üôÅ'
        elif call.data.split('_')[0] == 3:
            data['ratingSmile'] = 'üòê'
        elif call.data.split('_')[0] == 4:
            data['ratingSmile'] = 'üòè'
        else:
            data['ratingSmile'] = 'üòÑ'
        ansMsg = "–ù–∞–ø–∏—à–∏—Ç–µ –•–µ—à–¢–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏."
        await bot.edit_message_text(ansMsg, call.from_user.id, call.message.message_id)
        await Form.next()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –•–µ—à–¢–µ–≥–∞
@dp.message_handler(content_types=['any'], state=Form.hashtag)
async def process_comment(message: types.Message, state: FSMContext):
    if message.content_type != 'text':
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –•–µ—à–¢–µ–≥–∞.")
        return
    async with state.proxy() as data:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        location = data['location']
        category = data['category_output']
        media = data['media']
        comment = data['comment']
        raitingSmile = data['ratingSmile']
    await state.finish()
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å')).add(KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    await bot.send_message(chat_id= message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', reply_markup=keyboard)


#–í—ã–≤–æ–¥ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
@dp.message_handler()
async def cancel_handler(message: types.Message, state):
    await message.answer('–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É.')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)